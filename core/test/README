TEMPLATES:
each test module must have a folder defined within tests/ 
inside each module folder you will define each test case (test case files must follow the following syntax "testCaseXX.py")
Also inside tests/ you must define a test suite (following the syntax "MODULENAMESuite.py")

inside that suite file you must copy the following code overriding the MODULE_NAME constant: 
====================================================================================================================
import unittest
import os
import glob
    
def suite():
    MODULE_NAME = 'Write_here_your_module_name'
    
    path = '/'.join(os.path.abspath(__file__).split('/')[:-2]) + '/tests/'+MODULE_NAME+'/test*.py'
    test_file_strings = glob.glob(path)
    
    module_strings = ['workspace.tests.'+MODULE_NAME+'.'+str.split('/')[-1] for str in test_file_strings]

    suites = [unittest.defaultTestLoader.loadTestsFromName('.'.join(name.split('.')[:-1])) \
              for name in module_strings]
    
    testSuite = unittest.TestSuite(suites)
    
    return  testSuite
    
    

 ===================================================================================================================

HOW TO USE:
at the root of the project type:
$ python manage.py test app_name module:MODULENAME --settings="junar.app_name.settings"

command may have more than one module

USE:

FROM JunarTestCase.
-------------------
# response is not used here, because it uses the html content
# it is handled internally
assertElement(cssSelector, count)
assertNotElement(cssSelector)
assert404()
assertIsJSON()
assertHeader(header, value)

FROM Django TestCase.
---------------------
assertContains(response, text, count=None, status_code=200)
assertNotContains(response, text, status_code=200)
assertFormError(response, form, field, errors)
assertTemplateUsed(response, template_name)
assertTemplateNotUsed(response, template_name)
assertRedirects(response, expected_url, status_code=302, target_status_code=200)

FROM unittest TestCase.
-----------------------
assertAlmostEqual = failUnlessAlmostEqual(self, first, second, places=7, msg=None)
assertAlmostEquals = failUnlessAlmostEqual(self, first, second, places=7, msg=None)
assertEqual = failUnlessEqual(self, first, second, msg=None)
assertEquals = failUnlessEqual(self, first, second, msg=None)
assertFalse = failIf(self, expr, msg=None)
assertNotAlmostEqual = failIfAlmostEqual(self, first, second, places=7, msg=None)
assertNotAlmostEquals = failIfAlmostEqual(self, first, second, places=7, msg=None)
assertNotEqual = failIfEqual(self, first, second, msg=None)
assertNotEquals = failIfEqual(self, first, second, msg=None)
assertRaises = failUnlessRaises(self, excClass, callableObj, *args, **kwargs)
assertTrue = failUnless(self, expr, msg=None)